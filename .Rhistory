a
a <- available.packages()
View(a)
install.packages("slidify")
install.packages("ggplot2")
find.package("devtools")
install.packages("devtools")
clear
library(devtools)
find_rtools()
install.packages("KernSmooth")
load ("KernSmooth")
library(KernSmooth)
x<-4
x
class(x)
x<-list(2,"a","b",TRUE)
y<-x[[1]]
class(y)
y
x<-1:4
y<-2
x+y
x<-(3,5,1,10,12,6)
x<-c(3,5,1,10,12,6)
x[x<6]<-0
x
x<-c(3,5,1,10,12,6)
x[x<6]==0
x
x
x[x==0]<6
x
clear
clear()
library(readr)
hw1_data <- read_csv("C:/Users/izaru/Desktop/DataScience/RProgrammig/hw1_data.csv")
View(hw1_data)
x<-hw1_data(row(47))
x<-readLines(hw1_data,47)
con <- read_csv("C:/Users/izaru/Desktop/DataScience/RProgrammig/hw1_data.csv")
x<-readLines(con,47)
is.na.data.frame(hw1_data)
sum(is.na(hw1_data$Ozone))
i<-is.na(hw1_data$Ozone)
j<-c(!i)
j
r<-c(hw1_data$Ozone)
r
bad<-is.na(r)
r[!bad]
r2<-r[!bad]
sum(r2)
count.fields(r2)
length(r2)
val1<-sum(r2)
val2<-length(r2)
val1/val2
View(con)
data.subO <- data[data$Ozone > 31, , drop = FALSE]
data.subO <- data[hw1_data$Ozone > 31, , drop = FALSE]
data<-read.csv("C:/Users/izaru/Desktop/DataScience/RProgrammig/hw1_data.csv")
data.subO <- data[data$Ozone > 31, , drop = FALSE]
data.subTO <- data.subO[data.subO$Temp > 90, , drop = FALSE]
data.subTOO <- na.omit(data.subTO)
mean(data.subTOO$Solar.R)
data.June <- data[data$Month == 6, , drop = FALSE]
mean(data.June$Temp)
data.May <- data[data$Month == 5, , drop( = FALSE)]
data.May <- data[data$Month == 5, , drop = FALSE]
max(data.May$Ozone)
data.May0 <- na.omit(data.May)
max(data.May0$Ozone)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
z, 555, z
c(z,555,z)
z*2+100
my_z<-c(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-c(z/my_sqrt)
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
swirl()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
dir()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create(testdir)
?dir.create
dir.create(file.path(old.dir,testdir))
subDir<-testdir
subDir<-"testdir"
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1')
file.path("folder1,"folder2)
file.path("folder1","folder2")
?dir.create
dir.create("testdir2","testdir3")
dir.create(file.path('testdir2','testdir3'))
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
setwd("testdir")
info()
setwd
setwd(old.dir)
1:20
pi:10
15:1
?:
?':'
sq(1,20)
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, time=40)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-("My", "name", "is")
my_char<-c("My", "name", "is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char)
my_name<-c(my_char,"Isaac")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep=" ")
paste(c(1:3),c("x","y","z"), sep = "")
paste(1:3,c("x","y","z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
print(my_data)
my_data
my_data/0
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x?
x
x?
x
?x
--
c()
c(1)
[c(3,5,7)]
c(3,5,7)
c(3,5,7)[]
c([3])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar",norf)
names(vect2)<-names(vect)
vect2
names(vect2) <- c("foo", "bar", "norf")
identical()
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-class(my_vector)
my_matrix<-my_vector
?matrix
matrix(data=1:20,nrow=4,ncol=5)
matrix(1:20,nrow=4,ncol=5)
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data,prefix = cnames)
colnames(my_data)<-cnames
my_data
info()
bye()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
5
makeVector()
set(1)
mvec<-makeVector()
x<-1:4
mvec$set(x)
mvec$get()
mvec$getmean()
mvec$setmean(3.4)
mvec$getmean()
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
## The simbol <<- set the value in the enviroment
## Is a superassignment
x <<- y
inverseM <<- NULL
}
get <- function() x
setinverseM <- function(inverse) inverseM <<- inverse
getinverseM <- function() inverseM
list(set = set, get = get,
setinverseM = setinverseM,
getinverseM = getinverseM)
}
my-matix<-makeCacheMatrix()
myMatrix<-makeCacheMatrix()
m<-matrix(1:20,10,2)
m
myMatrix$set(m)
inverseM
myMatrix$get()
myMatrix$getinverseM()
myMatrix$setinverseM(m)
myMatrix$getinverseM()
?inverse
cacheSolve <- function(x, ...) {
inverseM <- x$getinverseM()
if(!is.null(inverseM)) {
message("getting cached data")
return(inverseM)
}
mat.data <- x$get()
inverseM <- solve(mat.data, ...)
x$setinverseM(inverseM)
return(inverseM)
}
cacheSolve(myMatrix)
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
cacheM<-makeCacheMatrix()
dato<-matrix(1:20,2,10)
cacheM$set(dato)
cacheM$get()
cacheM$getinv()
install.packages("MASS")
ginv(dato)
library(mass)
library("MASS")
ginv(dato)
z<-ginv(dato)
cacheM$setinv(z)
solve<-cacheSolve()
solve<-cacheSolve(cacheM)
solve
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
packages <- c("data.table", "quantmod")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
getwd()
setwd("../..")
getwd()
setwd("C:/Users/izaru/Desktop/DataScience/Data-Cleaning/project")
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
path_rf <- file.path("UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
str(dataActivityTest)
str(dataActivityTrain)
str(dataFeaturesTest)
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
data
Data
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
str(Data)
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
head(Data$activity,30)
Data$activity<-factor(Data$activity)
Data$activity<- factor(Data$activity,labels=as.character(activityLabels$V2))
head(Data$activity,30)
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
library(knitr)
install.packages("knitr")
library(knitr)
knit2html("codebook.Rmd");
knit2html("codebook.Rmd");
getwd()
knit2html("CodeBook.md");
knit2html("CodeBook.md")
knit2html("codebook.Rmd");
